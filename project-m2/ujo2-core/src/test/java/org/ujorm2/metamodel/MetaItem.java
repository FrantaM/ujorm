package org.ujorm2.metamodel;

import java.math.BigDecimal;
import javax.annotation.Nullable;
import org.ujorm2.Key;
import org.ujorm2.core.KeyImpl;
import org.ujorm2.core.KeyFactory;
import org.ujorm2.core.MetaInterface;
import org.ujorm2.core.UjoContext;
import org.ujorm2.doman.Item;

/**
 * TODO: A helper class generated by a Maven module.
 * @author Pavel Ponec
 */
public class MetaItem<D> extends KeyImpl<D, Item> implements MetaInterface<D> {

    private final KeyFactory<Item> keyFactory = new KeyFactory(Item.class);

    private final Key<Item, Integer> id = keyFactory.newKey("id",
            (d) -> d.getId(),
            (d, v) -> d.setId(v));

    private final Key<Item, String> note = keyFactory.newKey("note",
            (d) -> d.getNote(),
            (d, v) -> d.setNote(v));

    private final Key<Item, BigDecimal> price = keyFactory.newKey("price",
            (d) -> d.getPrice(),
            (d, v) -> d.setPrice(v));

    private final MetaOrder<Item> order = keyFactory.newRelation("order",
            (d) -> d.getOrder(),
            (d, v) -> d.setOrder(v));

    private final Key<Item, Boolean> descending = keyFactory.newKey("descending",
            (d) -> d.getDescending(),
            (d, v) -> d.setDescending(v));

    private final Key<Item, Integer> codePoints = keyFactory.newKey("codePoints",
            (d) -> d.getCodePoints(),
            (d, v) -> d.setCodePoints(v));

    public MetaItem(Class<D> domainClass, UjoContext context) {
        super(domainClass, context);
    }

    // --- KEY PROVIDERS ---

    public Key<D, Integer> id() {
        if (getDomainClass().isAssignableFrom(keyFactory.getDomainClass())) {
            return (Key) id;
        } else {
            throw new IllegalStateException();
        }
    }

    public Key<D, String> note() {
        if (getDomainClass().isAssignableFrom(keyFactory.getDomainClass())) {
            return (Key) note;
        } else {
            throw new IllegalStateException();
        }
    }

    public Key<D, BigDecimal> price() {
        if (getDomainClass().isAssignableFrom(keyFactory.getDomainClass())) {
            return (Key) price;
        } else {
            throw new IllegalStateException();
        }
    }

    public MetaOrder<D> order() {
        if (getDomainClass().isAssignableFrom(keyFactory.getDomainClass())) {
            return (MetaOrder) order;
        } else {
            throw new IllegalStateException();
        }
    }

    public Key<D, Boolean> descending$() {
        if (getDomainClass().isAssignableFrom(keyFactory.getDomainClass())) {
            return (Key) descending;
        } else {
            throw new IllegalStateException();
        }
    }

    public Key<D, Integer> codePoints$() {
        if (getDomainClass().isAssignableFrom(keyFactory.getDomainClass())) {
            return (Key) codePoints;
        } else {
            throw new IllegalStateException();
        }
    }

    // ---- Helper method

    @Override
    public D createDomain() {
        return (D) new Item();
    }

    public static final MetaItem<Item> of(@Nullable UjoContext context) {
        return context.getMetaModel(Item.class, MetaItem.class);
    }

    public static final MetaItem<Item> of() {
        return of(UjoContext.of());
    }


}
